

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri Sep 08 15:33:13 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F628A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001F                     	;# 
    76     0081                     	;# 
    77     0085                     	;# 
    78     0086                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0092                     	;# 
    82     0098                     	;# 
    83     0099                     	;# 
    84     009A                     	;# 
    85     009B                     	;# 
    86     009C                     	;# 
    87     009D                     	;# 
    88     009F                     	;# 
    89     0000                     	;# 
    90     0001                     	;# 
    91     0002                     	;# 
    92     0003                     	;# 
    93     0004                     	;# 
    94     0005                     	;# 
    95     0006                     	;# 
    96     000A                     	;# 
    97     000B                     	;# 
    98     000C                     	;# 
    99     000E                     	;# 
   100     000E                     	;# 
   101     000F                     	;# 
   102     0010                     	;# 
   103     0011                     	;# 
   104     0012                     	;# 
   105     0015                     	;# 
   106     0015                     	;# 
   107     0016                     	;# 
   108     0017                     	;# 
   109     0018                     	;# 
   110     0019                     	;# 
   111     001A                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     008C                     	;# 
   117     008E                     	;# 
   118     0092                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009F                     	;# 
   126                           
   127                           	psect	nvBANK0
   128     003D                     __pnvBANK0:
   129     003D                     _rx:
   130     003D                     	ds	1
   131     0005                     _PORTA	set	5
   132     001F                     _CMCON	set	31
   133     001A                     _RCREG	set	26
   134     0019                     _TXREG	set	25
   135     002B                     _RA3	set	43
   136     002A                     _RA2	set	42
   137     0029                     _RA1	set	41
   138     0028                     _RA0	set	40
   139     0030                     _RB0	set	48
   140     00C1                     _OERR	set	193
   141     00C4                     _CREN	set	196
   142     0065                     _RCIF	set	101
   143     0064                     _TXIF	set	100
   144     00C7                     _SPEN	set	199
   145     0085                     _TRISA	set	133
   146     0099                     _SPBRG	set	153
   147     0437                     _TRISB7	set	1079
   148     0436                     _TRISB6	set	1078
   149     0435                     _TRISB5	set	1077
   150     0434                     _TRISB4	set	1076
   151     0430                     _TRISB0	set	1072
   152     04C1                     _TRMT	set	1217
   153     04C5                     _TXEN	set	1221
   154     0432                     _TRISB2	set	1074
   155     0431                     _TRISB1	set	1073
   156     04C4                     _SYNC	set	1220
   157     04C2                     _BRGH	set	1218
   158                           
   159                           	psect	cinit
   160     07F3                     start_initialization:	
   161                           ; #config settings
   162                           
   163     07F3                     __initialization:
   164                           
   165                           ; Clear objects allocated to COMMON
   166     07F3  01FC               	clrf	__pbssCOMMON& (0+127)
   167     07F4  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   168                           
   169                           ; Clear objects allocated to BANK0
   170     07F5  1283               	bcf	3,5	;RP0=0, select bank0
   171     07F6  1303               	bcf	3,6	;RP1=0, select bank0
   172     07F7  01B6               	clrf	__pbssBANK0& (0+127)
   173     07F8  01B7               	clrf	(__pbssBANK0+1)& (0+127)
   174     07F9  01B8               	clrf	(__pbssBANK0+2)& (0+127)
   175     07FA  01B9               	clrf	(__pbssBANK0+3)& (0+127)
   176     07FB  01BA               	clrf	(__pbssBANK0+4)& (0+127)
   177     07FC  01BB               	clrf	(__pbssBANK0+5)& (0+127)
   178     07FD  01BC               	clrf	(__pbssBANK0+6)& (0+127)
   179     07FE                     end_of_initialization:	
   180                           ;End of C runtime variable initialization code
   181                           
   182     07FE                     __end_of__initialization:
   183     07FE  0183               	clrf	3
   184     07FF  2EED               	ljmp	_main	;jump to C main() function
   185                           
   186                           	psect	bssCOMMON
   187     007C                     __pbssCOMMON:
   188     007C                     _open1:
   189     007C                     	ds	2
   190                           
   191                           	psect	bssBANK0
   192     0036                     __pbssBANK0:
   193     0036                     _open4:
   194     0036                     	ds	2
   195     0038                     _open3:
   196     0038                     	ds	2
   197     003A                     _open2:
   198     003A                     	ds	2
   199     003C                     _tx:
   200     003C                     	ds	1
   201                           
   202                           	psect	cstackCOMMON
   203     0070                     __pcstackCOMMON:
   204     0070                     ?_Write:
   205     0070                     ??_Write:	
   206                           ; 1 bytes @ 0x0
   207                           
   208     0070                     ?_Read:	
   209                           ; 1 bytes @ 0x0
   210                           
   211     0070                     ??_Read:	
   212                           ; 1 bytes @ 0x0
   213                           
   214     0070                     ?_main:	
   215                           ; 1 bytes @ 0x0
   216                           
   217     0070                     ?___aldiv:	
   218                           ; 1 bytes @ 0x0
   219                           
   220     0070                     Write@data:	
   221                           ; 4 bytes @ 0x0
   222                           
   223     0070                     ___aldiv@divisor:	
   224                           ; 1 bytes @ 0x0
   225                           
   226                           
   227                           ; 4 bytes @ 0x0
   228     0070                     	ds	4
   229     0074                     ___aldiv@dividend:
   230                           
   231                           ; 4 bytes @ 0x4
   232     0074                     	ds	4
   233     0078                     ??___aldiv:
   234                           
   235                           ; 1 bytes @ 0x8
   236     0078                     	ds	1
   237     0079                     UART_Init@x:
   238                           
   239                           ; 2 bytes @ 0x9
   240     0079                     	ds	2
   241     007B                     ??_main:
   242                           
   243                           ; 1 bytes @ 0xB
   244     007B                     	ds	1
   245                           
   246                           	psect	cstackBANK0
   247     0020                     __pcstackBANK0:
   248     0020                     ___aldiv@counter:
   249                           
   250                           ; 1 bytes @ 0x0
   251     0020                     	ds	1
   252     0021                     ___aldiv@sign:
   253                           
   254                           ; 1 bytes @ 0x1
   255     0021                     	ds	1
   256     0022                     ___aldiv@quotient:
   257                           
   258                           ; 4 bytes @ 0x2
   259     0022                     	ds	4
   260     0026                     ?_UART_Init:
   261     0026                     UART_Init@Baudrate:	
   262                           ; 1 bytes @ 0x6
   263                           
   264                           
   265                           ; 4 bytes @ 0x6
   266     0026                     	ds	4
   267     002A                     ??_UART_Init:
   268                           
   269                           ; 1 bytes @ 0xA
   270     002A                     	ds	12
   271                           
   272                           	psect	maintext
   273     06ED                     __pmaintext:	
   274 ;;
   275 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   276 ;;
   277 ;; *************** function _main *****************
   278 ;; Defined at:
   279 ;;		line 81 in file "miccont.c"
   280 ;; Parameters:    Size  Location     Type
   281 ;;		None
   282 ;; Auto vars:     Size  Location     Type
   283 ;;		None
   284 ;; Return value:  Size  Location     Type
   285 ;;                  1    wreg      void 
   286 ;; Registers used:
   287 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   288 ;; Tracked objects:
   289 ;;		On entry : B00/0
   290 ;;		On exit  : 0/0
   291 ;;		Unchanged: 0/0
   292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   293 ;;      Params:         0       0       0       0
   294 ;;      Locals:         0       0       0       0
   295 ;;      Temps:          1       0       0       0
   296 ;;      Totals:         1       0       0       0
   297 ;;Total ram usage:        1 bytes
   298 ;; Hardware stack levels required when called: 2
   299 ;; This function calls:
   300 ;;		_Read
   301 ;;		_UART_Init
   302 ;;		_Write
   303 ;; This function is called by:
   304 ;;		Startup code after reset
   305 ;; This function uses a non-reentrant model
   306 ;;
   307                           
   308     06ED                     _main:	
   309                           ;psect for function _main
   310                           
   311     06ED                     l858:	
   312                           ;incstack = 0
   313                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   314                           
   315                           
   316                           ;miccont.c: 83:     TRISB0=0;
   317     06ED  1683               	bsf	3,5	;RP0=1, select bank1
   318     06EE  1303               	bcf	3,6	;RP1=0, select bank1
   319     06EF  1006               	bcf	6,0	;volatile
   320                           
   321                           ;miccont.c: 84:     TRISB4=1;
   322     06F0  1606               	bsf	6,4	;volatile
   323                           
   324                           ;miccont.c: 85:     TRISB5=1;
   325     06F1  1686               	bsf	6,5	;volatile
   326                           
   327                           ;miccont.c: 86:     TRISB6=1;
   328     06F2  1706               	bsf	6,6	;volatile
   329                           
   330                           ;miccont.c: 87:     TRISB7=1;
   331     06F3  1786               	bsf	6,7	;volatile
   332     06F4                     l860:
   333                           
   334                           ;miccont.c: 88:     UART_Init(9600);
   335     06F4  3000               	movlw	0
   336     06F5  1283               	bcf	3,5	;RP0=0, select bank0
   337     06F6  1303               	bcf	3,6	;RP1=0, select bank0
   338     06F7  00A9               	movwf	UART_Init@Baudrate+3
   339     06F8  3000               	movlw	0
   340     06F9  00A8               	movwf	UART_Init@Baudrate+2
   341     06FA  3025               	movlw	37
   342     06FB  00A7               	movwf	UART_Init@Baudrate+1
   343     06FC  3080               	movlw	128
   344     06FD  00A6               	movwf	UART_Init@Baudrate
   345     06FE  2688               	fcall	_UART_Init
   346     06FF                     l862:
   347                           
   348                           ;miccont.c: 89:     TRISA=0X00;
   349     06FF  1683               	bsf	3,5	;RP0=1, select bank1
   350     0700  1303               	bcf	3,6	;RP1=0, select bank1
   351     0701  0185               	clrf	5	;volatile
   352     0702                     l864:
   353                           
   354                           ;miccont.c: 90:     CMCON=0X07;
   355     0702  3007               	movlw	7
   356     0703  1283               	bcf	3,5	;RP0=0, select bank0
   357     0704  1303               	bcf	3,6	;RP1=0, select bank0
   358     0705  009F               	movwf	31	;volatile
   359     0706                     l866:
   360                           
   361                           ;miccont.c: 91:     PORTA=0x00;
   362     0706  0185               	clrf	5	;volatile
   363     0707                     l868:
   364                           
   365                           ;miccont.c: 92:     RB0=0;
   366     0707  1006               	bcf	6,0	;volatile
   367     0708                     l870:
   368                           
   369                           ;miccont.c: 93:     rx=0xc5;
   370     0708  30C5               	movlw	197
   371     0709  00BD               	movwf	_rx
   372     070A                     l872:
   373                           
   374                           ;miccont.c: 94:     Write(rx);
   375     070A  30C5               	movlw	197
   376     070B  266D               	fcall	_Write
   377     070C                     l874:
   378                           
   379                           ;miccont.c: 97:     rx=Read();
   380     070C  2679               	fcall	_Read
   381     070D  1283               	bcf	3,5	;RP0=0, select bank0
   382     070E  1303               	bcf	3,6	;RP1=0, select bank0
   383     070F  00BD               	movwf	_rx
   384     0710                     l876:
   385                           
   386                           ;miccont.c: 98:     tx=rx;
   387     0710  083D               	movf	_rx,w
   388     0711  00BC               	movwf	_tx
   389     0712                     l878:
   390                           
   391                           ;miccont.c: 99:     RA0=(rx%2);
   392     0712  183D               	btfsc	_rx,0
   393     0713  2F15               	goto	u441
   394     0714  2F19               	goto	u440
   395     0715                     u441:
   396     0715  1283               	bcf	3,5	;RP0=0, select bank0
   397     0716  1303               	bcf	3,6	;RP1=0, select bank0
   398     0717  1405               	bsf	5,0	;volatile
   399     0718  2F1C               	goto	u454
   400     0719                     u440:
   401     0719  1283               	bcf	3,5	;RP0=0, select bank0
   402     071A  1303               	bcf	3,6	;RP1=0, select bank0
   403     071B  1005               	bcf	5,0	;volatile
   404     071C                     u454:
   405     071C                     l880:
   406                           
   407                           ;miccont.c: 100:     RA1=((rx>>1)%2);
   408     071C  083D               	movf	_rx,w
   409     071D  00FB               	movwf	??_main
   410     071E  3001               	movlw	1
   411     071F                     u465:
   412     071F  1003               	clrc
   413     0720  0CFB               	rrf	??_main,f
   414     0721  3EFF               	addlw	-1
   415     0722  1D03               	skipz
   416     0723  2F1F               	goto	u465
   417     0724  187B               	btfsc	??_main,0
   418     0725  2F27               	goto	u471
   419     0726  2F2B               	goto	u470
   420     0727                     u471:
   421     0727  1283               	bcf	3,5	;RP0=0, select bank0
   422     0728  1303               	bcf	3,6	;RP1=0, select bank0
   423     0729  1485               	bsf	5,1	;volatile
   424     072A  2F2E               	goto	u484
   425     072B                     u470:
   426     072B  1283               	bcf	3,5	;RP0=0, select bank0
   427     072C  1303               	bcf	3,6	;RP1=0, select bank0
   428     072D  1085               	bcf	5,1	;volatile
   429     072E                     u484:
   430     072E                     l882:
   431                           
   432                           ;miccont.c: 101:     RA2=((rx>>2)%2);
   433     072E  083D               	movf	_rx,w
   434     072F  00FB               	movwf	??_main
   435     0730  3002               	movlw	2
   436     0731                     u495:
   437     0731  1003               	clrc
   438     0732  0CFB               	rrf	??_main,f
   439     0733  3EFF               	addlw	-1
   440     0734  1D03               	skipz
   441     0735  2F31               	goto	u495
   442     0736  187B               	btfsc	??_main,0
   443     0737  2F39               	goto	u501
   444     0738  2F3D               	goto	u500
   445     0739                     u501:
   446     0739  1283               	bcf	3,5	;RP0=0, select bank0
   447     073A  1303               	bcf	3,6	;RP1=0, select bank0
   448     073B  1505               	bsf	5,2	;volatile
   449     073C  2F40               	goto	u514
   450     073D                     u500:
   451     073D  1283               	bcf	3,5	;RP0=0, select bank0
   452     073E  1303               	bcf	3,6	;RP1=0, select bank0
   453     073F  1105               	bcf	5,2	;volatile
   454     0740                     u514:
   455     0740                     l884:
   456                           
   457                           ;miccont.c: 102:     RA3=((rx>>3)%2);
   458     0740  083D               	movf	_rx,w
   459     0741  00FB               	movwf	??_main
   460     0742  3003               	movlw	3
   461     0743                     u525:
   462     0743  1003               	clrc
   463     0744  0CFB               	rrf	??_main,f
   464     0745  3EFF               	addlw	-1
   465     0746  1D03               	skipz
   466     0747  2F43               	goto	u525
   467     0748  187B               	btfsc	??_main,0
   468     0749  2F4B               	goto	u531
   469     074A  2F4F               	goto	u530
   470     074B                     u531:
   471     074B  1283               	bcf	3,5	;RP0=0, select bank0
   472     074C  1303               	bcf	3,6	;RP1=0, select bank0
   473     074D  1585               	bsf	5,3	;volatile
   474     074E  2F52               	goto	u544
   475     074F                     u530:
   476     074F  1283               	bcf	3,5	;RP0=0, select bank0
   477     0750  1303               	bcf	3,6	;RP1=0, select bank0
   478     0751  1185               	bcf	5,3	;volatile
   479     0752                     u544:
   480     0752                     l886:
   481                           
   482                           ;miccont.c: 104:     Write(tx);
   483     0752  083C               	movf	_tx,w
   484     0753  266D               	fcall	_Write
   485     0754  2F0C               	goto	l874
   486     0755  2800               	ljmp	start
   487     0756                     __end_of_main:
   488                           
   489                           	psect	text1
   490     066D                     __ptext1:	
   491 ;; *************** function _Write *****************
   492 ;; Defined at:
   493 ;;		line 50 in file "miccont.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  data            1    wreg     unsigned char 
   496 ;; Auto vars:     Size  Location     Type
   497 ;;  data            1    0[COMMON] unsigned char 
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   507 ;;      Params:         0       0       0       0
   508 ;;      Locals:         1       0       0       0
   509 ;;      Temps:          0       0       0       0
   510 ;;      Totals:         1       0       0       0
   511 ;;Total ram usage:        1 bytes
   512 ;; Hardware stack levels used: 1
   513 ;; This function calls:
   514 ;;		Nothing
   515 ;; This function is called by:
   516 ;;		_main
   517 ;; This function uses a non-reentrant model
   518 ;;
   519                           
   520     066D                     _Write:	
   521                           ;psect for function _Write
   522                           
   523                           
   524                           ;incstack = 0
   525                           ; Regs used in _Write: [wreg]
   526                           ;Write@data stored from wreg
   527     066D  00F0               	movwf	Write@data
   528     066E                     l846:
   529                           
   530                           ;miccont.c: 50: void Write(char data);miccont.c: 51: {;miccont.c: 52:   TXEN = 1;
   531     066E  1683               	bsf	3,5	;RP0=1, select bank1
   532     066F  1303               	bcf	3,6	;RP1=0, select bank1
   533     0670  1698               	bsf	24,5	;volatile
   534     0671                     l60:	
   535                           ;miccont.c: 53:   while(!TXIF);
   536                           
   537     0671  1283               	bcf	3,5	;RP0=0, select bank0
   538     0672  1E0C               	btfss	12,4	;volatile
   539     0673  2E75               	goto	u411
   540     0674  2E76               	goto	u410
   541     0675                     u411:
   542     0675  2E71               	goto	l60
   543     0676                     u410:
   544     0676                     l848:
   545                           
   546                           ;miccont.c: 54:   TXREG = data;
   547     0676  0870               	movf	Write@data,w
   548     0677  0099               	movwf	25	;volatile
   549     0678                     l63:
   550     0678  0008               	return
   551     0679                     __end_of_Write:
   552                           
   553                           	psect	text2
   554     0688                     __ptext2:	
   555 ;; *************** function _UART_Init *****************
   556 ;; Defined at:
   557 ;;		line 37 in file "miccont.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;  Baudrate        4    6[BANK0 ] long 
   560 ;; Auto vars:     Size  Location     Type
   561 ;;  x               2    9[COMMON] unsigned int 
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   571 ;;      Params:         0       4       0       0
   572 ;;      Locals:         2       0       0       0
   573 ;;      Temps:          0      12       0       0
   574 ;;      Totals:         2      16       0       0
   575 ;;Total ram usage:       18 bytes
   576 ;; Hardware stack levels used: 1
   577 ;; Hardware stack levels required when called: 1
   578 ;; This function calls:
   579 ;;		___aldiv
   580 ;; This function is called by:
   581 ;;		_main
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585     0688                     _UART_Init:	
   586                           ;psect for function _UART_Init
   587                           
   588     0688                     l832:	
   589                           ;incstack = 0
   590                           ; Regs used in _UART_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   591                           
   592                           
   593                           ;miccont.c: 37: void UART_Init(long int Baudrate);miccont.c: 38: {;miccont.c: 39:     BR
      +                          GH=1;
   594     0688  1683               	bsf	3,5	;RP0=1, select bank1
   595     0689  1303               	bcf	3,6	;RP1=0, select bank1
   596     068A  1518               	bsf	24,2	;volatile
   597     068B                     l834:
   598                           
   599                           ;miccont.c: 40:     unsigned int x;;miccont.c: 41:     x = (4000000 - Baudrate*16)/(Baud
      +                          rate*16);
   600     068B  1283               	bcf	3,5	;RP0=0, select bank0
   601     068C  1303               	bcf	3,6	;RP1=0, select bank0
   602     068D  0826               	movf	UART_Init@Baudrate,w
   603     068E  00AA               	movwf	??_UART_Init
   604     068F  0827               	movf	UART_Init@Baudrate+1,w
   605     0690  00AB               	movwf	??_UART_Init+1
   606     0691  0828               	movf	UART_Init@Baudrate+2,w
   607     0692  00AC               	movwf	??_UART_Init+2
   608     0693  0829               	movf	UART_Init@Baudrate+3,w
   609     0694  00AD               	movwf	??_UART_Init+3
   610     0695  3004               	movlw	4
   611     0696                     u385:
   612     0696  1003               	clrc
   613     0697  0DAA               	rlf	??_UART_Init,f
   614     0698  0DAB               	rlf	??_UART_Init+1,f
   615     0699  0DAC               	rlf	??_UART_Init+2,f
   616     069A  0DAD               	rlf	??_UART_Init+3,f
   617     069B                     u380:
   618     069B  3EFF               	addlw	-1
   619     069C  1D03               	skipz
   620     069D  2E96               	goto	u385
   621     069E  082D               	movf	??_UART_Init+3,w
   622     069F  00F3               	movwf	___aldiv@divisor+3
   623     06A0  082C               	movf	??_UART_Init+2,w
   624     06A1  00F2               	movwf	___aldiv@divisor+2
   625     06A2  082B               	movf	??_UART_Init+1,w
   626     06A3  00F1               	movwf	___aldiv@divisor+1
   627     06A4  082A               	movf	??_UART_Init,w
   628     06A5  00F0               	movwf	___aldiv@divisor
   629     06A6  0826               	movf	UART_Init@Baudrate,w
   630     06A7  00AE               	movwf	??_UART_Init+4
   631     06A8  0827               	movf	UART_Init@Baudrate+1,w
   632     06A9  00AF               	movwf	??_UART_Init+5
   633     06AA  0828               	movf	UART_Init@Baudrate+2,w
   634     06AB  00B0               	movwf	??_UART_Init+6
   635     06AC  0829               	movf	UART_Init@Baudrate+3,w
   636     06AD  00B1               	movwf	??_UART_Init+7
   637     06AE  3004               	movlw	4
   638     06AF                     u395:
   639     06AF  1003               	clrc
   640     06B0  0DAE               	rlf	??_UART_Init+4,f
   641     06B1  0DAF               	rlf	??_UART_Init+5,f
   642     06B2  0DB0               	rlf	??_UART_Init+6,f
   643     06B3  0DB1               	rlf	??_UART_Init+7,f
   644     06B4                     u390:
   645     06B4  3EFF               	addlw	-1
   646     06B5  1D03               	skipz
   647     06B6  2EAF               	goto	u395
   648     06B7  3000               	movlw	0
   649     06B8  00B2               	movwf	??_UART_Init+8
   650     06B9  3009               	movlw	9
   651     06BA  00B3               	movwf	??_UART_Init+9
   652     06BB  303D               	movlw	61
   653     06BC  00B4               	movwf	??_UART_Init+10
   654     06BD  3000               	movlw	0
   655     06BE  00B5               	movwf	??_UART_Init+11
   656     06BF  082E               	movf	??_UART_Init+4,w
   657     06C0  02B2               	subwf	??_UART_Init+8,f
   658     06C1  082F               	movf	??_UART_Init+5,w
   659     06C2  1C03               	skipc
   660     06C3  0F2F               	incfsz	??_UART_Init+5,w
   661     06C4  2EC6               	goto	u401
   662     06C5  2EC7               	goto	u402
   663     06C6                     u401:
   664     06C6  02B3               	subwf	??_UART_Init+9,f
   665     06C7                     u402:
   666     06C7  0830               	movf	??_UART_Init+6,w
   667     06C8  1C03               	skipc
   668     06C9  0F30               	incfsz	??_UART_Init+6,w
   669     06CA  2ECC               	goto	u403
   670     06CB  2ECD               	goto	u404
   671     06CC                     u403:
   672     06CC  02B4               	subwf	??_UART_Init+10,f
   673     06CD                     u404:
   674     06CD  0831               	movf	??_UART_Init+7,w
   675     06CE  1C03               	skipc
   676     06CF  0F31               	incfsz	??_UART_Init+7,w
   677     06D0  2ED2               	goto	u405
   678     06D1  2ED3               	goto	u406
   679     06D2                     u405:
   680     06D2  02B5               	subwf	??_UART_Init+11,f
   681     06D3                     u406:
   682     06D3  0835               	movf	??_UART_Init+11,w
   683     06D4  00F7               	movwf	___aldiv@dividend+3
   684     06D5  0834               	movf	??_UART_Init+10,w
   685     06D6  00F6               	movwf	___aldiv@dividend+2
   686     06D7  0833               	movf	??_UART_Init+9,w
   687     06D8  00F5               	movwf	___aldiv@dividend+1
   688     06D9  0832               	movf	??_UART_Init+8,w
   689     06DA  00F4               	movwf	___aldiv@dividend
   690     06DB  2756               	fcall	___aldiv
   691     06DC  0871               	movf	?___aldiv+1,w
   692     06DD  00FA               	movwf	UART_Init@x+1
   693     06DE  0870               	movf	?___aldiv,w
   694     06DF  00F9               	movwf	UART_Init@x
   695     06E0                     l836:
   696                           
   697                           ;miccont.c: 42:     SPBRG = x;
   698     06E0  0879               	movf	UART_Init@x,w
   699     06E1  1683               	bsf	3,5	;RP0=1, select bank1
   700     06E2  1303               	bcf	3,6	;RP1=0, select bank1
   701     06E3  0099               	movwf	25	;volatile
   702     06E4                     l838:
   703                           
   704                           ;miccont.c: 43:     SYNC = 0;
   705     06E4  1218               	bcf	24,4	;volatile
   706     06E5                     l840:
   707                           
   708                           ;miccont.c: 44:     SPEN = 1;
   709     06E5  1283               	bcf	3,5	;RP0=0, select bank0
   710     06E6  1303               	bcf	3,6	;RP1=0, select bank0
   711     06E7  1798               	bsf	24,7	;volatile
   712     06E8                     l842:
   713                           
   714                           ;miccont.c: 45:     TRISB1 = 1;
   715     06E8  1683               	bsf	3,5	;RP0=1, select bank1
   716     06E9  1303               	bcf	3,6	;RP1=0, select bank1
   717     06EA  1486               	bsf	6,1	;volatile
   718     06EB                     l844:
   719                           
   720                           ;miccont.c: 46:     TRISB2 = 1;
   721     06EB  1506               	bsf	6,2	;volatile
   722     06EC                     l57:
   723     06EC  0008               	return
   724     06ED                     __end_of_UART_Init:
   725                           
   726                           	psect	text3
   727     0756                     __ptext3:	
   728 ;; *************** function ___aldiv *****************
   729 ;; Defined at:
   730 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c90\common\aldiv.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;  divisor         4    0[COMMON] long 
   733 ;;  dividend        4    4[COMMON] long 
   734 ;; Auto vars:     Size  Location     Type
   735 ;;  quotient        4    2[BANK0 ] long 
   736 ;;  sign            1    1[BANK0 ] unsigned char 
   737 ;;  counter         1    0[BANK0 ] unsigned char 
   738 ;; Return value:  Size  Location     Type
   739 ;;                  4    0[COMMON] long 
   740 ;; Registers used:
   741 ;;		wreg, status,2, status,0, btemp+1
   742 ;; Tracked objects:
   743 ;;		On entry : 0/0
   744 ;;		On exit  : 0/0
   745 ;;		Unchanged: 0/0
   746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   747 ;;      Params:         8       0       0       0
   748 ;;      Locals:         0       6       0       0
   749 ;;      Temps:          1       0       0       0
   750 ;;      Totals:         9       6       0       0
   751 ;;Total ram usage:       15 bytes
   752 ;; Hardware stack levels used: 1
   753 ;; This function calls:
   754 ;;		Nothing
   755 ;; This function is called by:
   756 ;;		_UART_Init
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760     0756                     ___aldiv:	
   761                           ;psect for function ___aldiv
   762                           
   763     0756                     l790:	
   764                           ;incstack = 0
   765                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
   766                           
   767     0756  1283               	bcf	3,5	;RP0=0, select bank0
   768     0757  1303               	bcf	3,6	;RP1=0, select bank0
   769     0758  01A1               	clrf	___aldiv@sign
   770     0759                     l792:
   771     0759  1FF3               	btfss	___aldiv@divisor+3,7
   772     075A  2F5C               	goto	u281
   773     075B  2F5D               	goto	u280
   774     075C                     u281:
   775     075C  2F6A               	goto	l247
   776     075D                     u280:
   777     075D                     l794:
   778     075D  09F0               	comf	___aldiv@divisor,f
   779     075E  09F1               	comf	___aldiv@divisor+1,f
   780     075F  09F2               	comf	___aldiv@divisor+2,f
   781     0760  09F3               	comf	___aldiv@divisor+3,f
   782     0761  0AF0               	incf	___aldiv@divisor,f
   783     0762  1903               	skipnz
   784     0763  0AF1               	incf	___aldiv@divisor+1,f
   785     0764  1903               	skipnz
   786     0765  0AF2               	incf	___aldiv@divisor+2,f
   787     0766  1903               	skipnz
   788     0767  0AF3               	incf	___aldiv@divisor+3,f
   789     0768  01A1               	clrf	___aldiv@sign
   790     0769  0AA1               	incf	___aldiv@sign,f
   791     076A                     l247:
   792     076A  1FF7               	btfss	___aldiv@dividend+3,7
   793     076B  2F6D               	goto	u291
   794     076C  2F6E               	goto	u290
   795     076D                     u291:
   796     076D  2F7D               	goto	l800
   797     076E                     u290:
   798     076E                     l796:
   799     076E  09F4               	comf	___aldiv@dividend,f
   800     076F  09F5               	comf	___aldiv@dividend+1,f
   801     0770  09F6               	comf	___aldiv@dividend+2,f
   802     0771  09F7               	comf	___aldiv@dividend+3,f
   803     0772  0AF4               	incf	___aldiv@dividend,f
   804     0773  1903               	skipnz
   805     0774  0AF5               	incf	___aldiv@dividend+1,f
   806     0775  1903               	skipnz
   807     0776  0AF6               	incf	___aldiv@dividend+2,f
   808     0777  1903               	skipnz
   809     0778  0AF7               	incf	___aldiv@dividend+3,f
   810     0779                     l798:
   811     0779  3001               	movlw	1
   812     077A  00FF               	movwf	btemp+1
   813     077B  087F               	movf	btemp+1,w
   814     077C  06A1               	xorwf	___aldiv@sign,f
   815     077D                     l800:
   816     077D  3000               	movlw	0
   817     077E  00A5               	movwf	___aldiv@quotient+3
   818     077F  3000               	movlw	0
   819     0780  00A4               	movwf	___aldiv@quotient+2
   820     0781  3000               	movlw	0
   821     0782  00A3               	movwf	___aldiv@quotient+1
   822     0783  3000               	movlw	0
   823     0784  00A2               	movwf	___aldiv@quotient
   824     0785                     l802:
   825     0785  0873               	movf	___aldiv@divisor+3,w
   826     0786  0472               	iorwf	___aldiv@divisor+2,w
   827     0787  0471               	iorwf	___aldiv@divisor+1,w
   828     0788  0470               	iorwf	___aldiv@divisor,w
   829     0789  1903               	skipnz
   830     078A  2F8C               	goto	u301
   831     078B  2F8D               	goto	u300
   832     078C                     u301:
   833     078C  2FDA               	goto	l824
   834     078D                     u300:
   835     078D                     l804:
   836     078D  01A0               	clrf	___aldiv@counter
   837     078E  0AA0               	incf	___aldiv@counter,f
   838     078F  2F9D               	goto	l810
   839     0790                     l806:
   840     0790  3001               	movlw	1
   841     0791  00F8               	movwf	??___aldiv
   842     0792                     u315:
   843     0792  1003               	clrc
   844     0793  0DF0               	rlf	___aldiv@divisor,f
   845     0794  0DF1               	rlf	___aldiv@divisor+1,f
   846     0795  0DF2               	rlf	___aldiv@divisor+2,f
   847     0796  0DF3               	rlf	___aldiv@divisor+3,f
   848     0797  0BF8               	decfsz	??___aldiv,f
   849     0798  2F92               	goto	u315
   850     0799                     l808:
   851     0799  3001               	movlw	1
   852     079A  00FF               	movwf	btemp+1
   853     079B  087F               	movf	btemp+1,w
   854     079C  07A0               	addwf	___aldiv@counter,f
   855     079D                     l810:
   856     079D  1FF3               	btfss	___aldiv@divisor+3,7
   857     079E  2FA0               	goto	u321
   858     079F  2FA1               	goto	u320
   859     07A0                     u321:
   860     07A0  2F90               	goto	l806
   861     07A1                     u320:
   862     07A1                     l812:
   863     07A1  3001               	movlw	1
   864     07A2  00F8               	movwf	??___aldiv
   865     07A3                     u335:
   866     07A3  1003               	clrc
   867     07A4  0DA2               	rlf	___aldiv@quotient,f
   868     07A5  0DA3               	rlf	___aldiv@quotient+1,f
   869     07A6  0DA4               	rlf	___aldiv@quotient+2,f
   870     07A7  0DA5               	rlf	___aldiv@quotient+3,f
   871     07A8  0BF8               	decfsz	??___aldiv,f
   872     07A9  2FA3               	goto	u335
   873     07AA                     l814:
   874     07AA  0873               	movf	___aldiv@divisor+3,w
   875     07AB  0277               	subwf	___aldiv@dividend+3,w
   876     07AC  1D03               	skipz
   877     07AD  2FB8               	goto	u345
   878     07AE  0872               	movf	___aldiv@divisor+2,w
   879     07AF  0276               	subwf	___aldiv@dividend+2,w
   880     07B0  1D03               	skipz
   881     07B1  2FB8               	goto	u345
   882     07B2  0871               	movf	___aldiv@divisor+1,w
   883     07B3  0275               	subwf	___aldiv@dividend+1,w
   884     07B4  1D03               	skipz
   885     07B5  2FB8               	goto	u345
   886     07B6  0870               	movf	___aldiv@divisor,w
   887     07B7  0274               	subwf	___aldiv@dividend,w
   888     07B8                     u345:
   889     07B8  1C03               	skipc
   890     07B9  2FBB               	goto	u341
   891     07BA  2FBC               	goto	u340
   892     07BB                     u341:
   893     07BB  2FCB               	goto	l820
   894     07BC                     u340:
   895     07BC                     l816:
   896     07BC  0870               	movf	___aldiv@divisor,w
   897     07BD  02F4               	subwf	___aldiv@dividend,f
   898     07BE  0871               	movf	___aldiv@divisor+1,w
   899     07BF  1C03               	skipc
   900     07C0  0F71               	incfsz	___aldiv@divisor+1,w
   901     07C1  02F5               	subwf	___aldiv@dividend+1,f
   902     07C2  0872               	movf	___aldiv@divisor+2,w
   903     07C3  1C03               	skipc
   904     07C4  0F72               	incfsz	___aldiv@divisor+2,w
   905     07C5  02F6               	subwf	___aldiv@dividend+2,f
   906     07C6  0873               	movf	___aldiv@divisor+3,w
   907     07C7  1C03               	skipc
   908     07C8  0F73               	incfsz	___aldiv@divisor+3,w
   909     07C9  02F7               	subwf	___aldiv@dividend+3,f
   910     07CA                     l818:
   911     07CA  1422               	bsf	___aldiv@quotient,0
   912     07CB                     l820:
   913     07CB  3001               	movlw	1
   914     07CC                     u355:
   915     07CC  1003               	clrc
   916     07CD  0CF3               	rrf	___aldiv@divisor+3,f
   917     07CE  0CF2               	rrf	___aldiv@divisor+2,f
   918     07CF  0CF1               	rrf	___aldiv@divisor+1,f
   919     07D0  0CF0               	rrf	___aldiv@divisor,f
   920     07D1  3EFF               	addlw	-1
   921     07D2  1D03               	skipz
   922     07D3  2FCC               	goto	u355
   923     07D4                     l822:
   924     07D4  3001               	movlw	1
   925     07D5  02A0               	subwf	___aldiv@counter,f
   926     07D6  1D03               	btfss	3,2
   927     07D7  2FD9               	goto	u361
   928     07D8  2FDA               	goto	u360
   929     07D9                     u361:
   930     07D9  2FA1               	goto	l812
   931     07DA                     u360:
   932     07DA                     l824:
   933     07DA  0821               	movf	___aldiv@sign,w
   934     07DB  1903               	btfsc	3,2
   935     07DC  2FDE               	goto	u371
   936     07DD  2FDF               	goto	u370
   937     07DE                     u371:
   938     07DE  2FEA               	goto	l828
   939     07DF                     u370:
   940     07DF                     l826:
   941     07DF  09A2               	comf	___aldiv@quotient,f
   942     07E0  09A3               	comf	___aldiv@quotient+1,f
   943     07E1  09A4               	comf	___aldiv@quotient+2,f
   944     07E2  09A5               	comf	___aldiv@quotient+3,f
   945     07E3  0AA2               	incf	___aldiv@quotient,f
   946     07E4  1903               	skipnz
   947     07E5  0AA3               	incf	___aldiv@quotient+1,f
   948     07E6  1903               	skipnz
   949     07E7  0AA4               	incf	___aldiv@quotient+2,f
   950     07E8  1903               	skipnz
   951     07E9  0AA5               	incf	___aldiv@quotient+3,f
   952     07EA                     l828:
   953     07EA  0825               	movf	___aldiv@quotient+3,w
   954     07EB  00F3               	movwf	?___aldiv+3
   955     07EC  0824               	movf	___aldiv@quotient+2,w
   956     07ED  00F2               	movwf	?___aldiv+2
   957     07EE  0823               	movf	___aldiv@quotient+1,w
   958     07EF  00F1               	movwf	?___aldiv+1
   959     07F0  0822               	movf	___aldiv@quotient,w
   960     07F1  00F0               	movwf	?___aldiv
   961     07F2                     l257:
   962     07F2  0008               	return
   963     07F3                     __end_of___aldiv:
   964                           
   965                           	psect	text4
   966     0679                     __ptext4:	
   967 ;; *************** function _Read *****************
   968 ;; Defined at:
   969 ;;		line 66 in file "miccont.c"
   970 ;; Parameters:    Size  Location     Type
   971 ;;		None
   972 ;; Auto vars:     Size  Location     Type
   973 ;;		None
   974 ;; Return value:  Size  Location     Type
   975 ;;                  1    wreg      unsigned char 
   976 ;; Registers used:
   977 ;;		wreg
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   983 ;;      Params:         0       0       0       0
   984 ;;      Locals:         0       0       0       0
   985 ;;      Temps:          0       0       0       0
   986 ;;      Totals:         0       0       0       0
   987 ;;Total ram usage:        0 bytes
   988 ;; Hardware stack levels used: 1
   989 ;; This function calls:
   990 ;;		Nothing
   991 ;; This function is called by:
   992 ;;		_main
   993 ;; This function uses a non-reentrant model
   994 ;;
   995                           
   996     0679                     _Read:	
   997                           ;psect for function _Read
   998                           
   999     0679                     l850:	
  1000                           ;incstack = 0
  1001                           ; Regs used in _Read: [wreg]
  1002                           
  1003                           
  1004                           ;miccont.c: 68:   CREN=1;
  1005     0679  1283               	bcf	3,5	;RP0=0, select bank0
  1006     067A  1303               	bcf	3,6	;RP1=0, select bank0
  1007     067B  1618               	bsf	24,4	;volatile
  1008                           
  1009                           ;miccont.c: 69:   if(OERR){
  1010     067C  1C98               	btfss	24,1	;volatile
  1011     067D  2E7F               	goto	u421
  1012     067E  2E80               	goto	u420
  1013     067F                     u421:
  1014     067F  2E82               	goto	l73
  1015     0680                     u420:
  1016     0680                     l852:
  1017                           
  1018                           ;miccont.c: 70:       CREN=0;
  1019     0680  1218               	bcf	24,4	;volatile
  1020                           
  1021                           ;miccont.c: 71:       CREN=1;
  1022     0681  1618               	bsf	24,4	;volatile
  1023     0682                     l73:
  1024     0682  1E8C               	btfss	12,5	;volatile
  1025     0683  2E85               	goto	u431
  1026     0684  2E86               	goto	u430
  1027     0685                     u431:
  1028     0685  2E82               	goto	l73
  1029     0686                     u430:
  1030     0686                     l854:
  1031                           
  1032                           ;miccont.c: 74:   return RCREG;
  1033     0686  081A               	movf	26,w	;volatile
  1034     0687                     l76:
  1035     0687  0008               	return
  1036     0688                     __end_of_Read:
  1037     007E                     btemp	set	126	;btemp
  1038     007E                     wtemp0	set	126
  1039                           
  1040                           	psect	config
  1041                           
  1042                           ;Config register CONFIG @ 0x2007
  1043                           ;	Oscillator Selection bits
  1044                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1045                           ;	Watchdog Timer Enable bit
  1046                           ;	WDTE = OFF, WDT disabled
  1047                           ;	Power-up Timer Enable bit
  1048                           ;	PWRTE = OFF, PWRT disabled
  1049                           ;	RA5/MCLR/VPP Pin Function Select bit
  1050                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1051                           ;	Brown-out Detect Enable bit
  1052                           ;	BOREN = OFF, BOD disabled
  1053                           ;	Low-Voltage Programming Enable bit
  1054                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1055                           ;	Data EE Memory Code Protection bit
  1056                           ;	CPD = OFF, Data memory code protection off
  1057                           ;	Flash Program Memory Code Protection bit
  1058                           ;	CP = OFF, Code protection off
  1059     2007                     	org	8199
  1060     2007  3F38               	dw	16184

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         9
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     22      30
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_UART_Init
    _UART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     617
                                             11 COMMON     1     1      0
                               _Read
                          _UART_Init
                              _Write
 ---------------------------------------------------------------------------------
 (1) _Write                                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                           18    14      4     595
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Read                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Read
   _UART_Init
     ___aldiv
   _Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     16      1E       3       37.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      2C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      2C      10        0.0%


Microchip Technology PIC Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri Sep 08 15:33:13 2023

                     l60 0671                       l63 0678                       l73 0682  
                     l57 06EC                       l76 0687                       _rx 003D  
                     _tx 003C                      l247 076A                      l257 07F2  
                    l800 077D                      l810 079D                      l802 0785  
                    l820 07CB                      l812 07A1                      l804 078D  
                    l822 07D4                      l814 07AA                      l806 0790  
                    l816 07BC                      l808 0799                      l824 07DA  
                    l840 06E5                      l832 0688                      l850 0679  
                    l826 07DF                      l818 07CA                      l842 06E8  
                    l834 068B                      l852 0680                      l828 07EA  
                    l844 06EB                      l836 06E0                      l860 06F4  
                    l854 0686                      l790 0756                      l838 06E4  
                    l846 066E                      l870 0708                      l862 06FF  
                    l792 0759                      l848 0676                      l880 071C  
                    l872 070A                      l864 0702                      l794 075D  
                    l882 072E                      l874 070C                      l866 0706  
                    l858 06ED                      l796 076E                      l884 0740  
                    l876 0710                      l868 0707                      l798 0779  
                    l886 0752                      l878 0712                      _RA0 0028  
                    _RA1 0029                      _RB0 0030                      _RA2 002A  
                    _RA3 002B                      u300 078D                      u301 078C  
                    u320 07A1                      u321 07A0                      u401 06C6  
                    u402 06C7                      u410 0676                      u315 0792  
                    u403 06CC                      u411 0675                      u420 0680  
                    u340 07BC                      u404 06CD                      u500 073D  
                    u421 067F                      u341 07BB                      u405 06D2  
                    u501 0739                      u430 0686                      u406 06D3  
                    u431 0685                      u335 07A3                      u360 07DA  
                    u280 075D                      u440 0719                      u361 07D9  
                    u345 07B8                      u281 075C                      u441 0715  
                    u370 07DF                      u290 076E                      u530 074F  
                    u514 0740                      u371 07DE                      u355 07CC  
                    u291 076D                      u531 074B                      u380 069B  
                    u525 0743                      u390 06B4                      u470 072B  
                    u454 071C                      u471 0727                      u544 0752  
                    u385 0696                      u465 071F                      u395 06AF  
                    u484 072E                      u495 0731                     _BRGH 04C2  
                   _CREN 00C4                     _RCIF 0065                     _OERR 00C1  
                   _SPEN 00C7                     _TRMT 04C1                     _TXEN 04C5  
                   _TXIF 0064                     _SYNC 04C4                     _Read 0679  
                   _main 06ED                     btemp 007E                     start 0000  
                  ?_Read 0070          __end_of___aldiv 07F3                    ?_main 0070  
                  _CMCON 001F                    _RCREG 001A                    _SPBRG 0099  
                  _PORTA 0005                    _TRISA 0085                    _TXREG 0019  
                  _Write 066D                    _open1 007C                    _open2 003A  
                  _open3 0038                    _open4 0036                    status 0003  
                  wtemp0 007E          __initialization 07F3             __end_of_Read 0688  
           __end_of_main 0756                   ??_Read 0070                   ??_main 007B  
                 ?_Write 0070                   _TRISB0 0430                   _TRISB1 0431  
                 _TRISB2 0432                   _TRISB4 0434                   _TRISB5 0435  
                 _TRISB6 0436                   _TRISB7 0437        __end_of_UART_Init 06ED  
              ??___aldiv 0078  __end_of__initialization 07FE           __pcstackCOMMON 0070  
          __end_of_Write 0679                  ??_Write 0070               __pbssBANK0 0036  
             __pmaintext 06ED                  ___aldiv 0756                  __ptext1 066D  
                __ptext2 0688                  __ptext3 0756                  __ptext4 0679  
       ___aldiv@dividend 0074     end_of_initialization 07FE         ___aldiv@quotient 0022  
              _UART_Init 0688               ?_UART_Init 0026      start_initialization 07F3  
            __pbssCOMMON 007C                ___latbits 0000            __pcstackBANK0 0020  
              __pnvBANK0 003D                Write@data 0070                 ?___aldiv 0070  
      UART_Init@Baudrate 0026              ??_UART_Init 002A               UART_Init@x 0079  
        ___aldiv@divisor 0070          ___aldiv@counter 0020             ___aldiv@sign 0021  
